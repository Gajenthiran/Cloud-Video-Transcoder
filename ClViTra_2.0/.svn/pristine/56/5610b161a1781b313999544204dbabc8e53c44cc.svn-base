package com.socket.server;

import java.io.File;

import com.xuggle.mediatool.IMediaReader;
import com.xuggle.mediatool.ToolFactory;

public class Transcode implements Runnable {
	
	//private static String ID;
	private static String Return_value;
	
	public void run() {
	}
	
	public Transcode(String ID) {
		
		//String ID = null;
    	// Do your job here.
        //ID = Java2MySql.getFirstInitializedVideo();
        if (ID!=null) {
        	//Java2MySql.Processing(ID);
        	String VideoName = Java2MySql.getVideoName(ID);
        	File inputFile = new File(VideoName);
        	String VideoNameWithoutExt = VideoName.substring(0, VideoName.length()- 4);
        	File outputFile = new File(VideoNameWithoutExt+".mp4");
            
            if (transcoder(inputFile, outputFile)) {
            	
                ObjectStore ob = new ObjectStore();
    		   	String URI = ob.ObjectStoreStart(outputFile.getPath());
    		   	//Java2MySql.VideoUpdate(ID, outputFile.getPath(), URI);
    		   	Return_value= ID+"%"+outputFile.getPath()+"%"+URI+"%success";
            }
        }
        try {
			Send.send(Return_value);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void transcode(String ID) {
		
		//ID = RID;
		(new Thread(new Transcode(ID))).start();
		//return Return_value;
	}
	
    public static boolean transcoder(File inputFile, File outputFile) {
        try {
        //Create an IMediaReader using the ToolFactory and the pat to the input file.
        IMediaReader reader = ToolFactory.makeReader(inputFile.getAbsolutePath());
         
        //Attach a listener to the reader.  The listener is an IMediaWriter.
        reader.addListener(ToolFactory.makeWriter(outputFile.getAbsolutePath(), reader));

        //outputs it to the given file in the requested format.
        while(reader.readPacket() == null);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
         
        return true;
    }
	
	
	
}